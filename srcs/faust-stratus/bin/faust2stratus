#!/bin/bash

#####################################################################
#                                                                   #
#               Compiles Faust programs for the Chaos Stratus pedal #
#                                                                   #
#####################################################################

ARCHFILE=${STRATUS_ARCH:-stratus.cpp}
STRATUS_EFFECTS_DIR=${STRATUS_EFFECTS_DIR:-/opt/update/sftp/firmware/effects}
: ${CXX:=g++}
which "$CXX" > /dev/null && CPPCOMPILE=true

. faustpath
. usage.sh

echoHelp() 
{
    usage faust2stratus "[options] [Faust options] <file.dsp>"
    platform "Chaos Audio Stratus"
    echo "Compiles Faust programs for the Chaos Audio Stratus pedal"
    option "-nocppc" "Do not compile the generated CPP source files"
    option "-stratusinstall" "Installs the effect library on the stratus pedal if the build was performed on the pedal and the DSP file suitably constructed"
    option "Faust options"
    exit
}

if [ "$#" -eq 0 ]; then
    echo 'Please, provide a Faust file to process !'
    echo ''
    echoHelp
fi

#
# Supporting various compile platforms - but, obviously, the first is the most important
#
if [ "$(uname -m)" = armv7l ]; then        # for the Stratus
	MYGCCFLAGS="-march=armv7-a -mtune=cortex-a8 -mfloat-abi=hard -mfpu=neon -ftree-vectorize -ffast-math"
elif [ "$(uname -s)" = Darwin ]; then      # for macOS
    if [[ $(sysctl -n machdep.cpu.brand_string) =~ "Apple" ]]; then
        # Silicon MX
        MYGCCFLAGS=""
    else
        # Intel
        MYGCCFLAGS="-march=native "
    fi
else                                        # for Linux (Intel)
    MYGCCFLAGS="-march=native"
fi

CXXFLAGS+=" -fPIC -shared -O3 $MYGCCFLAGS"

#
# Pick out the options
#
OPTIONS="-scn FaustDSP -light -nvi"
STRATUSCLASS=dsp
while [[ "$1" ]]; do
	opt=$1
	shift
    if [[ "$opt" =~ ^--?"help"$ || $opt == "-h" ]]; then
        echoHelp
	elif [[ "$opt" =~ ^--?"stratusc"$ ]]; then
		# Ignore obsolete option
		true
	elif [[ "$opt" =~ ^--?"stratusinstall"$ ]]; then
		STRATUSINSTALL="true"
	elif [[ "$opt" =~ ^--?"-nocppc"$ ]]; then
		CPPCOMPILE="false"
	elif [[ "$opt" =~ ^--?"-stratusclass"$ ]]; then
		STRATUSCLASS=${1:-dsp}
		shift
	elif [[ -f "$opt" && ${opt: -4} == ".dsp" ]]; then
        FILES="$FILES $opt"
    else
        OPTIONS="$OPTIONS $opt"
    fi
done

#-------------------------------------------------------------------
# compile the *.dsp files using
#
for f in $FILES; do
	EFFECT=$(realpath "$f")

	EFFECT_DIR="$(dirname "$EFFECT")"
	EFFECT_FILENAME="$(basename "$EFFECT")"
	EFFECT_STEM="${EFFECT_FILENAME%%.*}"
	EFFECT_CPP="$EFFECT_DIR/$EFFECT_STEM.cpp"
	EFFECT_SO="$EFFECT_DIR/$EFFECT_STEM.so"
    
	# compile faust to c++
	echo "Building effect $EFFECT:" >&2
	echo "  Faust options: -i -a $ARCHFILE $OPTIONS $EFFECT -o $EFFECT_CPP"
	[[ "$CPPCOMPILE" == true ]] && echo "  $CXX options  : $CXXFLAGS $EFFECT_CPP -o $EFFECT_SO"
    faust -i -a $ARCHFILE $OPTIONS "$EFFECT" -o "$EFFECT_CPP" || exit

	if [[ "$CPPCOMPILE" == true ]]; then
    	# compile c++ to binary
    	(
        	$CXX $CXXFLAGS "$EFFECT_CPP" -o "$EFFECT_SO"
			RC=$?
        	if [[ $RC -eq 0 && $(uname) == Darwin ]]; then
            	codesign --sign - --deep --force "$EFFECT_SO"
				RC=$?
        	fi
			exit $RC
    	) > /dev/null || exit

		if [[ "$STRATUSINSTALL" == "true" && -w "$STRATUS_EFFECTS_DIR" ]]; then
			# Install the effect if it has a stratusId global declaration

			#
			# Get the ID from the DSP file
			#
			STRATUS_ID=$(sed -n 's/\s*declare\s\s*stratusId\s\s*"\([0-9a-f]\{8\}-[0-9a-f]\{4\}-[0-9a-f]\{4\}-[0-9a-f]\{4\}-[0-9a-f]\{12\}\)";/\1/p' "${EFFECT}")
			[[ "$STRATUS_ID" ]] || { echo "Unable to install the effect - no valid 'startusId' declaration found in the DSP file"; exit 1; }
			STRATUS_VERSION=$(sed -n 's/\s*declare\s\s*version\s\s*"\([^"]*\)";/\1/p' "${EFFECT}")
			SO_FILE="${STRATUS_EFFECTS_DIR}/${STRATUS_ID}.so"
			VER_FILE="${STRATUS_EFFECTS_DIR}/${STRATUS_ID}.txt"
			BACKUP_SUFFIX=$(date +%Y-%m-%dT%H-%M-%S)
			[[ -f "${SO_FILE}" ]] && cp "$SO_FILE" /$HOME/${STRATUS_ID}.so.${BACKUP_SUFFIX}
			cp "$EFFECT_SO" "${SO_FILE}" || { echo "failed to install $EFFECT_SO as $SO_FILE"; exit 1; }
			echo "Effect $EFFECT_SO installed as $SO_FILE"
			if [[ "$STRATUS_VERSION" ]]; then
				[[ -f "${VER_FILE}" ]] && cp "$VER_FILE" /$HOME/${STRATUS_ID}.txt.${BACKUP_SUFFIX}
				echo -n "$STRATUS_VERSION" > "$VER_FILE"
				echo "Effect $EFFECT_SO version set to $STRATUS_VERSION"
			else
				echo "Unable to set version of $SO_FILE - no version declaration found in the DSP file"
			fi
		else
			echo "NOT installing effect $EFFECT_SO into Stratus effect folder $STRATUS_EFFECTS_DIR"
		fi
	else
		echo "NOT CPP compiling $EFFECT_CPP"
	fi
done

